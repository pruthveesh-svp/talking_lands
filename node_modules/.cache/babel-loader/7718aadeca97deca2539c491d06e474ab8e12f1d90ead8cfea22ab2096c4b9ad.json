{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, normalizeStyle as _normalizeStyle, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-60b5fa5a\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"grid-container\"\n};\nconst _hoisted_2 = [\"onMouseover\"];\nconst _hoisted_3 = [\"src\", \"alt\"];\nconst _hoisted_4 = {\n  class: \"overlay-text\"\n};\nconst _hoisted_5 = [\"onUpdate:modelValue\", \"onInput\"];\nconst _hoisted_6 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.imagesData, (data, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"grid-item\",\n      style: {\n        marginBottom: '30px',\n        borderRadius: '10px'\n      },\n      onMouseover: $event => $options.showOverlay(index),\n      onMouseleave: _cache[0] || (_cache[0] = (...args) => $options.hideOverlay && $options.hideOverlay(...args))\n    }, [_createElementVNode(\"img\", {\n      src: data.imageUrl,\n      alt: `Image ${index + 1}`,\n      class: \"image\",\n      style: {\n        borderRadius: '8px'\n      }\n    }, null, 8 /* PROPS */, _hoisted_3), $data.hoveredIndex === index ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 0,\n      class: \"overlay\",\n      style: _normalizeStyle({\n        borderRadius: data.overlayBorderRadius,\n        backgroundColor: data.overlayColor\n      })\n    }, [_createElementVNode(\"h6\", _hoisted_4, _toDisplayString(data.text), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n      type: \"color\",\n      \"onUpdate:modelValue\": $event => data.overlayColor = $event,\n      onInput: $event => $options.changeOverlayColor(index)\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_5), [[_vModelText, data.overlayColor]]), _createElementVNode(\"button\", {\n      onClick: $event => $options.toggleOverlay(index)\n    }, _toDisplayString(data.showOverlay ? 'Hide Overlay' : 'Show Overlay'), 9 /* TEXT, PROPS */, _hoisted_6)], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true)], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","imagesData","data","index","key","style","marginBottom","borderRadius","onMouseover","$event","$options","showOverlay","onMouseleave","_cache","args","hideOverlay","_createElementVNode","src","imageUrl","alt","hoveredIndex","_normalizeStyle","overlayBorderRadius","backgroundColor","overlayColor","_hoisted_4","_toDisplayString","text","type","onInput","changeOverlayColor","onClick","toggleOverlay","_hoisted_6"],"sources":["C:\\Users\\Admin\\Desktop\\talkinglands\\vue\\project-name\\src\\components\\GridContent.vue"],"sourcesContent":["<template>\r\n  <div class=\"grid-container\">\r\n    <div\r\n      v-for=\"(data, index) in imagesData\"\r\n      :key=\"index\"\r\n      class=\"grid-item\"\r\n      :style=\"{ marginBottom: '30px', borderRadius: '10px' }\"\r\n      @mouseover=\"showOverlay(index)\"\r\n      @mouseleave=\"hideOverlay\"\r\n    >\r\n      <img\r\n        :src=\"data.imageUrl\"\r\n        :alt=\"`Image ${index + 1}`\"\r\n        class=\"image\"\r\n        :style=\"{ borderRadius: '8px' }\"\r\n      />\r\n      <div\r\n        v-if=\"hoveredIndex === index\"\r\n        class=\"overlay\"\r\n        :style=\"{ borderRadius: data.overlayBorderRadius, backgroundColor: data.overlayColor }\"\r\n      >\r\n        <h6 class=\"overlay-text\">{{ data.text }}</h6>\r\n        <input type=\"color\" v-model=\"data.overlayColor\" @input=\"changeOverlayColor(index)\" />\r\n        <button @click=\"toggleOverlay(index)\">{{ data.showOverlay ? 'Hide Overlay' : 'Show Overlay' }}</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      hoveredIndex: -1,\r\n      imagesData: [\r\n        {\r\n          imageUrl: require('@/assets/download.jpg'),\r\n          text: 'Farming forms the backbone of food production, supplying essential nourishment to communities worldwide.',\r\n          showOverlay: false,\r\n          overlayBorderRadius: '8px',\r\n          overlayColor: '#000000', // Default color black\r\n        },\r\n        {\r\n          imageUrl: require('@/assets/download.jpg'),\r\n          text: 'It plays a pivotal role in environmental conservation, fostering biodiversity, soil health, and sustainable land management practices.',\r\n          showOverlay: false,\r\n          overlayBorderRadius: '8px',\r\n          overlayColor: '#000000', // Default color black\r\n        },\r\n        {\r\n          imageUrl: require('@/assets/download.jpg'),\r\n          text: 'Farming serves as an economic lifeline, providing livelihoods, fostering rural development, and contributing significantly to global economies.',\r\n          showOverlay: false,\r\n          overlayBorderRadius: '8px',\r\n          overlayColor: '#000000', // Default color black\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  methods: {\r\n    showOverlay(index) {\r\n      this.hoveredIndex = index;\r\n    },\r\n    hideOverlay() {\r\n      this.hoveredIndex = -1;\r\n    },\r\n    toggleOverlay(index) {\r\n      this.imagesData[index].showOverlay = !this.imagesData[index].showOverlay;\r\n    },\r\n    changeOverlayColor(index) {\r\n      // This method handles the color change for the overlay\r\n      // You can perform additional validation if needed before updating the color\r\n      // For now, it directly updates the color in the data array\r\n      // You can add more sophisticated logic here as per your requirement\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n<style scoped>\r\n/* Additional styles for the component */\r\n/* Existing styles */\r\n.grid-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n}\r\n\r\n.grid-item {\r\n  position: relative;\r\n  width: calc(33.33% - 10px); /* Adjust as needed */\r\n  transition: all 0.3s ease-in-out;\r\n  margin-top: 20px; /* Added margin top */\r\n}\r\n\r\n.grid-item:hover .overlay {\r\n  opacity: 1;\r\n}\r\n\r\n.image {\r\n  width: 100%;\r\n  height: auto;\r\n  display: block;\r\n}\r\n\r\n.overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  opacity: 0;\r\n  transition: opacity 0.3s ease-in-out;\r\n}\r\n\r\n.overlay-text {\r\n  color: #fff;\r\n  text-align: center;\r\n  padding: 12px;\r\n}\r\n</style>\r\n\r\n\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAgB;;;;EAoBjBA,KAAK,EAAC;AAAc;;;;uBApB9BC,mBAAA,CAyBM,OAzBNC,UAyBM,I,kBAxBJD,mBAAA,CAuBME,SAAA,QAAAC,WAAA,CAtBoBC,KAAA,CAAAC,UAAU,GAA1BC,IAAI,EAAEC,KAAK;yBADrBP,mBAAA,CAuBM;MArBHQ,GAAG,EAAED,KAAK;MACXR,KAAK,EAAC,WAAW;MAChBU,KAAK,EAAE;QAAAC,YAAA;QAAAC,YAAA;MAAA,CAA8C;MACrDC,WAAS,EAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW,CAACR,KAAK;MAC5BS,YAAU,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEJ,QAAA,CAAAK,WAAA,IAAAL,QAAA,CAAAK,WAAA,IAAAD,IAAA,CAAW;QAExBE,mBAAA,CAKE;MAJCC,GAAG,EAAEf,IAAI,CAACgB,QAAQ;MAClBC,GAAG,WAAWhB,KAAK;MACpBR,KAAK,EAAC,OAAO;MACZU,KAAK,EAAE;QAAAE,YAAA;MAAA;yCAGFP,KAAA,CAAAoB,YAAY,KAAKjB,KAAK,I,cAD9BP,mBAAA,CAQM;;MANJD,KAAK,EAAC,SAAS;MACdU,KAAK,EAAAgB,eAAA;QAAAd,YAAA,EAAkBL,IAAI,CAACoB,mBAAmB;QAAAC,eAAA,EAAmBrB,IAAI,CAACsB;MAAY;QAEpFR,mBAAA,CAA6C,MAA7CS,UAA6C,EAAAC,gBAAA,CAAjBxB,IAAI,CAACyB,IAAI,kB,gBACrCX,mBAAA,CAAqF;MAA9EY,IAAI,EAAC,OAAO;uCAAU1B,IAAI,CAACsB,YAAY,GAAAf,MAAA;MAAGoB,OAAK,EAAApB,MAAA,IAAEC,QAAA,CAAAoB,kBAAkB,CAAC3B,KAAK;yEAAnDD,IAAI,CAACsB,YAAY,E,GAC9CR,mBAAA,CAAuG;MAA9Fe,OAAK,EAAAtB,MAAA,IAAEC,QAAA,CAAAsB,aAAa,CAAC7B,KAAK;wBAAMD,IAAI,CAACS,WAAW,0DAAAsB,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}