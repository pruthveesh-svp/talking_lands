{"ast":null,"code":"export default {\n  data() {\n    return {\n      products: [{\n        name: 'Apples',\n        price: 2.5,\n        quantity: 50\n      }, {\n        name: 'Oranges',\n        price: 3,\n        quantity: 30\n      }\n      // Add more products here\n      ],\n\n      orderQuantities: [],\n      // Store order quantities\n      marketProduct: 'Apples',\n      // Default product for market price\n      marketPrice: 0 // Placeholder for market price\n    };\n  },\n\n  methods: {\n    placeOrder(index) {\n      const orderedQuantity = this.orderQuantities[index];\n      if (orderedQuantity > 0 && orderedQuantity <= this.products[index].quantity) {\n        // Calculate total cost for the customer\n        const totalPrice = orderedQuantity * this.products[index].price;\n\n        // Perform actions like updating quantity, handling orders, etc.\n        this.products[index].quantity -= orderedQuantity;\n\n        // Display a message or perform additional actions for order handling\n        alert(`Order placed for ${orderedQuantity} ${this.products[index].name} for a total of $${totalPrice}`);\n\n        // Reset order quantity input\n        this.orderQuantities[index] = 0;\n      } else {\n        alert('Invalid quantity or not enough in stock!');\n      }\n    },\n    fetchMarketPrice() {\n      // Simulated API call or backend integration to fetch market price\n      // Replace with actual API integration\n      // Here, it's randomly generating a price for demonstration purposes\n      this.marketPrice = Math.random() * 10 + 1; // Random price between 1 and 10\n    }\n  },\n\n  created() {\n    // Fetch initial market price details\n    this.fetchMarketPrice();\n  }\n};","map":{"version":3,"names":["data","products","name","price","quantity","orderQuantities","marketProduct","marketPrice","methods","placeOrder","index","orderedQuantity","totalPrice","alert","fetchMarketPrice","Math","random","created"],"sources":["C:\\Users\\Admin\\Desktop\\talkinglands\\vue\\project-name\\src\\components\\GraphDesign.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Farmers Market</h1>\r\n\r\n    <!-- Display available products -->\r\n    <div v-for=\"(product, index) in products\" :key=\"index\">\r\n      <h2>{{ product.name }}</h2>\r\n      <p>Price: ${{ product.price }}</p>\r\n      <p>Available Quantity: {{ product.quantity }}</p>\r\n\r\n      <!-- Input for customer order -->\r\n      <div v-if=\"product.quantity > 0\">\r\n        <label for=\"orderQty\">Order Quantity:</label>\r\n        <input type=\"number\" v-model=\"orderQuantities[index]\" min=\"0\" :max=\"product.quantity\" />\r\n        <button @click=\"placeOrder(index)\">Place Order</button>\r\n      </div>\r\n\r\n      <hr />\r\n    </div>\r\n\r\n    <!-- Display market price details -->\r\n    <h2>Market Price Details</h2>\r\n    <p v-if=\"marketPrice\">Market Price for {{ marketProduct }}: ${{ marketPrice }}</p>\r\n    <p v-else>No market price available for {{ marketProduct }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      products: [\r\n        { name: 'Apples', price: 2.5, quantity: 50 },\r\n        { name: 'Oranges', price: 3, quantity: 30 },\r\n        // Add more products here\r\n      ],\r\n      orderQuantities: [], // Store order quantities\r\n      marketProduct: 'Apples', // Default product for market price\r\n      marketPrice: 0 // Placeholder for market price\r\n    };\r\n  },\r\n  methods: {\r\n    placeOrder(index) {\r\n      const orderedQuantity = this.orderQuantities[index];\r\n      if (orderedQuantity > 0 && orderedQuantity <= this.products[index].quantity) {\r\n        // Calculate total cost for the customer\r\n        const totalPrice = orderedQuantity * this.products[index].price;\r\n\r\n        // Perform actions like updating quantity, handling orders, etc.\r\n        this.products[index].quantity -= orderedQuantity;\r\n\r\n        // Display a message or perform additional actions for order handling\r\n        alert(`Order placed for ${orderedQuantity} ${this.products[index].name} for a total of $${totalPrice}`);\r\n\r\n        // Reset order quantity input\r\n        this.orderQuantities[index] = 0;\r\n      } else {\r\n        alert('Invalid quantity or not enough in stock!');\r\n      }\r\n    },\r\n    fetchMarketPrice() {\r\n      // Simulated API call or backend integration to fetch market price\r\n      // Replace with actual API integration\r\n      // Here, it's randomly generating a price for demonstration purposes\r\n      this.marketPrice = Math.random() * 10 + 1; // Random price between 1 and 10\r\n    }\r\n  },\r\n  created() {\r\n    // Fetch initial market price details\r\n    this.fetchMarketPrice();\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Add your CSS styles here if needed */\r\n</style>\r\n"],"mappings":"AA4BA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,CACR;QAAEC,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAE,GAAG;QAAEC,QAAQ,EAAE;MAAG,CAAC,EAC5C;QAAEF,IAAI,EAAE,SAAS;QAAEC,KAAK,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAG;MAC1C;MAAA,CACD;;MACDC,eAAe,EAAE,EAAE;MAAE;MACrBC,aAAa,EAAE,QAAQ;MAAE;MACzBC,WAAW,EAAE,EAAE;IACjB,CAAC;EACH,CAAC;;EACDC,OAAO,EAAE;IACPC,UAAUA,CAACC,KAAK,EAAE;MAChB,MAAMC,eAAc,GAAI,IAAI,CAACN,eAAe,CAACK,KAAK,CAAC;MACnD,IAAIC,eAAc,GAAI,KAAKA,eAAc,IAAK,IAAI,CAACV,QAAQ,CAACS,KAAK,CAAC,CAACN,QAAQ,EAAE;QAC3E;QACA,MAAMQ,UAAS,GAAID,eAAc,GAAI,IAAI,CAACV,QAAQ,CAACS,KAAK,CAAC,CAACP,KAAK;;QAE/D;QACA,IAAI,CAACF,QAAQ,CAACS,KAAK,CAAC,CAACN,QAAO,IAAKO,eAAe;;QAEhD;QACAE,KAAK,CAAE,oBAAmBF,eAAe,IAAI,IAAI,CAACV,QAAQ,CAACS,KAAK,CAAC,CAACR,IAAI,oBAAoBU,UAAW,EAAC,CAAC;;QAEvG;QACA,IAAI,CAACP,eAAe,CAACK,KAAK,IAAI,CAAC;MACjC,OAAO;QACLG,KAAK,CAAC,0CAA0C,CAAC;MACnD;IACF,CAAC;IACDC,gBAAgBA,CAAA,EAAG;MACjB;MACA;MACA;MACA,IAAI,CAACP,WAAU,GAAIQ,IAAI,CAACC,MAAM,CAAC,IAAI,EAAC,GAAI,CAAC,EAAE;IAC7C;EACF,CAAC;;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACH,gBAAgB,CAAC,CAAC;EACzB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}